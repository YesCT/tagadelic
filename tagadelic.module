<?php
/**
 * @file
 * Tagadelic makes weighted tag clouds from your taxonomy terms.
 */

/**
 * Implements hook_init().
 */
function tagadelic_init() {
  backdrop_add_css(backdrop_get_path('module', 'tagadelic') . '/tagadelic.css');
}

/**
 * Implements hook_menu().
 */
function tagadelic_menu() {
  $items = array();

  $items['admin/config/content/tagadelic'] = array(
    'title' => 'Tagadelic configuration',
    'description' => 'Configure the tag clouds. Set the order, the number of tags, and the depth of the clouds.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('tagadelic_settings'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'tagadelic.admin.inc',
  );

  $items['tagadelic'] = array(
    'title' => 'Tags',
    'page callback' => 'tagadelic_page_chunk',
    'page arguments' => array(NULL),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['tagadelic/list/%tagadelic_vocs'] = array(
    'title' => 'Tags',
    'page callback' => 'tagadelic_page_list',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['tagadelic/chunk/%tagadelic_vocs'] = array(
    'title' => 'Tags',
    'page callback' => 'tagadelic_page_chunk',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Menu wildcard loader.
 *
 * @param string $arg
 *  Argument as passed in via the URL.
 *
 * @return array
 *  All the fully loaded vocabularies indexed by machine name.
 */
function tagadelic_vocs_load($arg) {
  $names = explode(',', $arg);
  $vocabularies = array();
  foreach ($names as $machine) {
    $vocabularies[$machine] = taxonomy_vocabulary_load($machine);
  }

  return $vocabularies;
}

/**
 * Menu callback renders a tagadelic page.
 *
 * @param $vocabularies
 *   Array of fully loaded vocabularies indexed by machine name.
 *
 * @return string
 *   Rendered HTML output for weighted tag list.
 */
function tagadelic_page_chunk($vocabularies = NULL) {
  if ($vocabularies == NULL) {
    // Load all vocabs if none are specified.
    foreach (taxonomy_get_vocabularies(NULL) as $vocabulary) {
      $vocabularies[$vocabulary->machine_name] = $vocabulary->machine_name;
    }
  }

  $config = config('tagadelic.settings');
  $levels = $config->get('levels');
  $page_amount = $config->get('page_amount');
  $tags = tagadelic_get_weighted_tags(array_keys($vocabularies), $levels, $page_amount);
  $tags = tagadelic_sort_tags($tags);

  $output = theme('tagadelic_weighted', array('terms' => $tags));

  if (!$output) {
    return backdrop_not_found();
  }

  return '<div class="wrapper tagadelic">' . $output . '</div>';
}

/**
 * Menu callback renders a tagadelic page with listed items: each vocabulary.
 *
 * @param $vocabularies
 *   Array of fully loaded vocabularies indexed by machine name.
 *
 * @return string
 *   Rendered HTML output for all weighted tag lists.
 */
function tagadelic_page_list($vocabularies = NULL) {
  if ($vocabularies == NULL) {
    return backdrop_not_found();
  }

  $output = '';
  foreach ($vocabularies as $machine_name => $vocabulary) {
    // Sanitize.
    $vocabulary->description = filter_xss_admin($vocabulary->description);
    $vocabulary->name = filter_xss_admin($vocabulary->name);

    $config = config('tagadelic.settings');
    $levels = $config->get('levels');
    $page_amount = $config->get('page_amount');

    // The theme function is sometimes used for multiple vocabularies, so
    // expects an array of vocabulary names.
    $machine_names = array($vocabulary->machine_name);
    $tags = tagadelic_get_weighted_tags($machine_names, $levels, $page_amount);
    $tags = tagadelic_sort_tags($tags);

    $output .= theme('tagadelic_list_box', array('vocabulary' => $vocabulary, 'tags' => $tags));
  }

  if (!$output) {
    return backdrop_not_found();
  }

  return '<div class="wrapper tagadelic">' . $output . '</div>';
}

/**
 * API that returns a multidimensional array with tags given a node.
 *
 * @param $node
 *   A node object.
 * @return
 *   Multi-dimensional array keyed by vocabulary id then term id with term
 *   objects as values.
 */
function tagadelic_node_get_terms($node) {
  static $vocs;
  if ($terms = taxonomy_node_get_terms($node, 'tid')) {
    if (!isset($vocs[$node->type])) {
      $vocs[$node->type] = taxonomy_get_vocabularies($node->type);
    }
    $tags = array();
    foreach ($terms as $tid => $term) {
      if ($vocs[$node->type][$term->machine_name]->tags) {
        $tags[$term->machine_name][$tid] = $term;
      }
    }
    return $tags;
  }
}

/**
 * Function that gets the information from the database, passes it along to the
 * weight builder and returns these weighted tags. Note that the tags are
 * unordered at this stage, hence they need ordering either by calling our api
 * or by your own ordering data.
 *
 * @param array $machine_names
 *   Array of vocabulary machine names.
 * @param $steps
 *   The number of tag-sizes you will be using. If you give "12" you still get
 *   six different "weights". Defaults to 6 and is optional.
 * @param $size
 *   The number of tags that will be returned.
 *
 * @return
 *   An <em>unordered</em> array with tags-objects, containing the attribute
 *   $tag->weight.
 */
function tagadelic_get_weighted_tags($machine_names = array(), $steps = 6, $size = 60) {
  // Build the options so we can cache multiple versions.
  global $language;
  $options = implode('_', $machine_names) . '_' . $language->langcode . '_' . $steps . '_' . $size;
  // Check if the cache exists.
  $cache_name = 'tagadelic_cache_' . $options;
  $cache = cache_get($cache_name, 'cache_page');

  $tags = array();
  // Make sure cache has data.
  if (isset($cache->data)) {
    $tags = $cache->data;
  }
  else {
    if (!is_array($machine_names) || count($machine_names) == 0) {
      return array();
    }

    // Get data for terms to put in the tag cloud.
    $placeholders = array_fill(0, count($machine_names), '?');
    $in_phrase = implode(',', $placeholders);
    $query_string = 'SELECT COUNT(*) AS count, td.tid, td.vocabulary, td.name, td.description FROM {taxonomy_term_data} td INNER JOIN {taxonomy_index} tn ON td.tid = tn.tid INNER JOIN {node} n ON tn.nid = n.nid WHERE td.vocabulary IN (' . $in_phrase . ') GROUP BY td.tid, td.vocabulary, td.name, td.description HAVING COUNT(*) > 0 ORDER BY count DESC';
    if ($size > 0) {
      $result = db_query_range($query_string, 0, $size, $machine_names);
    }
    else {
      $result = db_query($query_string, $machine_names);
    }

    foreach ($result as $tag) {
      $tags[$tag->tid] = $tag;
    }

    $tags = tagadelic_build_weighted_tags($tags, $steps);
    cache_set($cache_name, $tags, 'cache_page', CACHE_TEMPORARY);
  }

  return $tags;
}

/**
 * API that returns an array with weighted tags.
 *
 * This is the hard part. People with better ideas are very very welcome to send
 * these to ber@webschuur.com. Distribution is one thing that needs attention.
 *
 * @param $tags
 *   A list of <em>objects</em> with the following attributes: $tag->count,
 *   $tag->tid, $tag->name and $tag->machine_name. Each Tag will be calculated and
 *   turned into a tag. Refer to tagadelic_get_weighted_tags() for an example.
 * @param $steps
 *   The amount of tag-sizes you will be using. If you give "12" you still get
 *   six different "weights". Defaults to 6 and is optional.
 * @return
 *   An <em>unordered</em> array with tags-objects, containing the attribute
 *   $tag->weight.
 */
function tagadelic_build_weighted_tags($tags, $steps = 6) {
  // Find minimum and maximum log-count. By our MatheMagician Steven Wittens aka
  // UnConeD.
  $tags_tmp = array();
  $min = 1e9;
  $max = -1e9;
  foreach ($tags as $id => $tag) {
    $tag->number_of_posts = $tag->count;
    $tag->count = log($tag->count);
    $min = min($min, $tag->count);
    $max = max($max, $tag->count);
    $tags_tmp[$id] = $tag;
  }
  // Note: we need to ensure the range is slightly too large to make sure even
  // the largest element is rounded down.
  $range = max(.01, $max - $min) * 1.0001;

  foreach ($tags_tmp as $key => $value) {
    $tags[$key]->weight = 1 + floor($steps * ($value->count - $min) / $range);
  }
  return $tags;
}

/**
 * API function to order a set of tags.
 *
 * @todo If you feel like making this more modular, please send me patches.
 */
function tagadelic_sort_tags($tags) {
  list($sort, $order) = explode(',', config_get('tagadelic.settings', 'sort_order'));
  switch ($sort) {
    case 'title':
      usort($tags, "_tagadelic_sort_by_title");
      break;
    case 'weight':
      usort($tags, "_tagadelic_sort_by_weight");
      break;
    case 'random':
      shuffle($tags);
      break;
  }
  if ($order == 'desc') {
    $tags = array_reverse($tags);
  }
  return $tags;
}

/**
 * Callback for usort, sort by count.
 */
function _tagadelic_sort_by_title($a, $b) {
  return strnatcasecmp($a->name, $b->name);
}

/**
 * Callback for usort, sort by weight.
 */
function _tagadelic_sort_by_weight($a, $b) {
  if ($a->weight == $b->weight) {
    // Ensure correct order when same weight
    return $a->count > $b->count;
  }
  return $a->weight > $b->weight;
}

/**
 * Theme function that renders the HTML for the tag cloud.
 *
 * @param array $variables
 *   An array containing the following keys:
 *   - terms: Array of taxonomy term data, including:
 *     - name: Sanitized term name.
 *     - tid: term ID.
 *     - weight: term weight.
 *     - description: Sanitized term description.
 *
 * @return string
 *   The output.
 *
 * @ingroup themable
 */
function theme_tagadelic_weighted($variables = array()) {
  $terms = $variables['terms'];
  $output = '';
  foreach ($terms as $term) {
    $output .= l($term->name, 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array('tagadelic', 'level' . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }

  return $output;
}

/**
 * Theme function that renders an entry in tagadelic/list/ views.
 *
 * @param $vocabulary
 *   A fully loaded taxonomy Vocabulary object, where name amd description have
 *   been previously sanitized.
 * @param $tags
 *   An array with weighted tag objects.
 *
 * @ingroup themable
 */
function theme_tagadelic_list_box($variables = array()) {
  $vocabulary = $variables['vocabulary'];
  $tags = $variables['tags'];

  $content = theme('tagadelic_weighted', array('terms' => $tags));

  $output = '<h2>' . $vocabulary->name . '</h2>';
  if ($vocabulary->description) {
    $output .= '<div>' . $vocabulary->description . '</div>';
  }
  $output .= '<div>' . $content . '</div>';

  return $output;
}

/**
 * Implements hook_block_info().
 */
function tagadelic_block_info() {
  $blocks = array();

  foreach (taxonomy_get_vocabularies() as $machine_name => $vocab) {
    $custom_info = config_get('tagadelic.settings', 'block_title_' . $machine_name);
    $info = (!empty($custom_info) ? $custom_info : t('Tags in @voc', array('@voc' => $vocab->name)));

    $blocks[$machine_name] = array(
      'info' => $info,
      'cache' => BACKDROP_CACHE_GLOBAL,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Assumes only one vocabulary per block.
 */
function tagadelic_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();
  if ($vocab = taxonomy_vocabulary_load($delta)) {
    $config = config('tagadelic.settings');

    $custom_subject = $config->get('block_title_' . $delta);
    $subject = (!empty($custom_subject) ? $custom_subject : t('Tags in @voc', array('@voc' => $vocab->name)));
    $block['subject'] = $subject;

    $levels = $config->get('levels');
    $page_amount = $config->get('page_amount');

    $tags = tagadelic_get_weighted_tags(array($delta), $levels, $settings['tags']);
    $tags = tagadelic_sort_tags($tags);

    $block['content'] = theme('tagadelic_weighted', array('terms' => $tags));

    if ($page_amount >= $settings['tags']) {
      $block['content'] .= theme('more_link', array('title' => t('more tags'), 'url' => 'tagadelic/chunk/' . $vocab->machine_name));
    }
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function tagadelic_block_configure($delta = '', $settings = array()) {
  $form = array();
  $form['tags'] = array(
    '#type' => 'number',
    '#title' => t('Number of tags to disply in this block.'),
    '#default_value' => isset($settings['tags'])? $settings['tags'] : 12,
    '#description' => t("Enter '0' to display all tags."),
  );
  return $form;
}

/**
 * Implements hook_theme().
 */
function tagadelic_theme() {
  return array(
    'tagadelic_list_box' => array('arguments' => array('vocabulary' => NULL, 'tags' => NULL)),
    'tagadelic_weighted' => array('arguments' => array('terms' => array())),
  );
}

/**
 * Implements hook_config_info().
 */
function tagadelic_config_info() {
  $prefixes['tagadelic.settings'] = array(
    'label' => t('Tagadelic settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
